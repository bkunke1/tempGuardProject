/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/dashboard.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/dashboard.js":
/*!**************************!*\
  !*** ./src/dashboard.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* eslint-disable no-magic-numbers */\r\n/* eslint-disable no-undef */\r\n// Constants & Variable Instantiation//\r\nconst ALARM = 'Alarm!';\r\nconst NORMAL = 'Normal';\r\nconst DEGREE_F = '°F';\r\nconst DEGREE_C = '°C';\r\nconst ACTIVE = 'Active';\r\nconst UP = 'UP';\r\nconst DOWN = 'DOWN';\r\nlet degreeSelected = DEGREE_F;\r\nlet tempSimulationStatus = 'INACTIVE';\r\nlet sensorList = [];\r\nlet tempUpdateFrequency = 1500;\r\n\r\n// Declaring Elements\r\nconst dashAddSensorBtn = document.getElementById('dashAddSensorModalUpdateBtn');\r\nconst simTempsBtn = document.getElementById('simTempBtn');\r\n// eslint-disable-next-line no-unused-vars\r\nconst stopTempFeedBtn = document.getElementById('stopTempFeedBtn');\r\nconst dashEditSensorModalUpdate = document.getElementById(\r\n  'dashEditSensorModalUpdateBtn'\r\n);\r\nconst editSensorBtn = document.getElementById('editSensorBtn');\r\nconst editSensorBtn2 = document.getElementById('editSensorBtn2');\r\nconst editSensorBtn3 = document.getElementById('editSensorBtn3');\r\nconst editSensorBtn4 = document.getElementById('editSensorBtn4');\r\nconst editSensorBtn5 = document.getElementById('editSensorBtn5');\r\nconst editSensorBtn6 = document.getElementById('editSensorBtn6');\r\nconst deleteSensorBtn = document.getElementById('confirmDeleteBtn');\r\n\r\n// creates sensor object\r\nclass Sensor {\r\n  constructor(\r\n    name,\r\n    currentTemp,\r\n    highAlarm,\r\n    lowAlarm,\r\n    rangeMax,\r\n    rangeMin\r\n  ) {\r\n    this.id = sensorList.length + 1;\r\n    this.name = name;\r\n    this.displayStatus = ACTIVE;\r\n    this.alarmStatus = 'Normal';\r\n    this.currentTemp = currentTemp;\r\n    this.highAlarm = highAlarm;\r\n    this.lowAlarm = lowAlarm;\r\n    this.rangeMax = rangeMax;\r\n    this.rangeMin = rangeMin;\r\n    this.range = rangeMax - rangeMin;\r\n    this.simTempDirection = UP;\r\n    this.tempRecords = [];\r\n  }\r\n}\r\n\r\n// consumes an object from sensorList and updates the alarmStatus property\r\nconst updateAlarmStatus = (obj, i) => {\r\n  if (+obj.currentTemp >= +obj.highAlarm || +obj.currentTemp <= +obj.lowAlarm) {\r\n    obj.alarmStatus = ALARM;\r\n    document\r\n      .getElementById('sensor' + i + '-name')\r\n      .parentNode.classList.add('alarm-mode-bg');\r\n  } else {\r\n    obj.alarmStatus = NORMAL;\r\n    document\r\n      .getElementById('sensor' + i + '-name')\r\n      .parentNode.classList.remove('alarm-mode-bg');\r\n  }\r\n  return obj.alarmStatus;\r\n};\r\n\r\n// updates degree symbol to F or C based on preferences saved\r\nconst updateDegreeSymbolSelection = () => {\r\n  if (sessionStorage.getItem('tempScaleSelection')) {\r\n    if (sessionStorage.getItem('tempScaleSelection') === 'F') {\r\n      degreeSelected = DEGREE_F;\r\n    } else degreeSelected = DEGREE_C;\r\n  }\r\n  const listOfElements = document.getElementsByClassName('cf-selector');\r\n  for (let i = 0; i < listOfElements.length; i++) {\r\n    listOfElements[i].innerText = degreeSelected;\r\n  }\r\n};\r\n\r\n// turns add sensor button on or off\r\nconst toggleDisableAddSensorBtn = () => {\r\n  if (sensorList.length > 5) {\r\n    document.getElementById('dashAddSensBtn').classList.add('disabled');\r\n    document.getElementById('dashAddSensBtn').setAttribute('data-toggle', '');\r\n  } else {\r\n    document.getElementById('dashAddSensBtn').classList.remove('disabled');\r\n    document\r\n      .getElementById('dashAddSensBtn')\r\n      .setAttribute('data-toggle', 'modal');\r\n  }\r\n};\r\n\r\n// turns simulate temps button on or off\r\n// works, but currently disabled to automate temp simulation vs using on/off buttons\r\n// const toggleDisablesimulateTempsBtn = (length) => {\r\n//   if (sensorList.length > 0) {\r\n//     simTempsBtn.classList.remove('disabled');\r\n//   } else {\r\n//     simTempsBtn.classList.add('disabled');\r\n//   }\r\n// };\r\n\r\n// updates the position of the temperature reading bar on a sensor\r\nconst updateTempBar = (sensor, index) => {\r\n  const tempBarSVG = document.getElementById(`tempBar${index}`);\r\n  const barEl = tempBarSVG.firstElementChild;\r\n  const leftTriangleEl = barEl.nextElementSibling;\r\n  const rightTriangleEl = leftTriangleEl.nextElementSibling;\r\n  const currentPxLocation =\r\n    ((sensor.rangeMax - sensor.currentTemp) / sensor.range) * 205;\r\n  const updatePosns = () => {\r\n    barEl.setAttribute('y', currentPxLocation);\r\n    leftTriangleEl.setAttribute(\r\n      'points',\r\n      `20,${currentPxLocation - 4} 30,${currentPxLocation + 2} 20,${\r\n        currentPxLocation + 8\r\n      }`\r\n    );\r\n    rightTriangleEl.setAttribute(\r\n      'points',\r\n      `70,${currentPxLocation - 4} 60,${currentPxLocation + 2} 70,${\r\n        currentPxLocation + 8\r\n      }`\r\n    );\r\n  };\r\n  updatePosns();\r\n};\r\n\r\n// updates the text fields on all sensor objects\r\nconst updateDOM = () => {\r\n  for (let i = 0; i < sensorList.length; i++) {\r\n    document.getElementById('sensor' + i + '-name').innerText =\r\n      sensorList[i].name;\r\n    document.getElementById('sensor' + i + '-currentTemp').innerText =\r\n      sensorList[i].currentTemp;\r\n    document.getElementById(\r\n      'sensor' + i + '-alarmStatus'\r\n    ).innerText = updateAlarmStatus(sensorList[i], i);\r\n    document.getElementById('sensor' + i + '-highAlarm').innerText =\r\n      sensorList[i].highAlarm;\r\n    document.getElementById('sensor' + i + '-lowAlarm').innerText =\r\n      sensorList[i].lowAlarm;\r\n    updateDegreeSymbolSelection();\r\n    document.getElementById('s' + i).classList.remove('inactive-box');\r\n    updateTempBar(sensorList[i], i);\r\n  }\r\n};\r\n\r\n// updates the temperature scale numbers next to thermometer for a sensor\r\nconst updateTempMarkings = (\r\n  id,\r\n  highAlarm,\r\n  lowAlarm,\r\n  rangeMax,\r\n  rangeMin,\r\n  range\r\n) => {\r\n  let maxReading = document.getElementById(`tempScaleNumberMax${id}`);\r\n  const highAlarmReading = document.getElementById(\r\n    `tempScaleNumberMaxAlarm${id}`\r\n  );\r\n  const zeroReading = document.getElementById(`tempScaleMarkerZero${id}`);\r\n  const lowAlarmReading = document.getElementById(\r\n    `tempScaleNumberMinAlarm${id}`\r\n  );\r\n  const minReading = document.getElementById(`tempScaleNumberMin${id}`);\r\n  const validTempZoneMax = document.getElementById(`validTempZone${id}`);\r\n  maxReading.innerText = rangeMax;\r\n  highAlarmReading.innerText = rangeMax - Math.floor(range / 4);\r\n  zeroReading.innerText = rangeMax - Math.floor(range / 2);\r\n  lowAlarmReading.innerText = rangeMax - 3 * Math.floor(range / 4);\r\n  minReading.innerText = rangeMin;\r\n  function setValidTempZone() {\r\n    let newValidCeilingPosition = ((rangeMax - highAlarm) / range) * 205;\r\n    let newValidFloorPosition = ((highAlarm - lowAlarm) / range) * 210;\r\n    newValidCeilingPosition =\r\n      newValidCeilingPosition < 5 ? 5 : newValidCeilingPosition;\r\n    newValidFloorPosition =\r\n      newValidCeilingPosition + newValidFloorPosition > 210\r\n        ? 205 - newValidCeilingPosition\r\n        : newValidFloorPosition;\r\n    if (newValidCeilingPosition >= 5 && newValidCeilingPosition <= 210) {\r\n      validTempZoneMax.setAttribute('y', newValidCeilingPosition);\r\n    } else {\r\n      validTempZoneMax.setAttribute('y', 5);\r\n    }\r\n    if (highAlarm - lowAlarm < 3) {\r\n      validTempZoneMax.setAttribute('height', 6);\r\n    } else if (newValidFloorPosition >= 5 && newValidFloorPosition <= 210) {\r\n      validTempZoneMax.setAttribute('height', newValidFloorPosition);\r\n    } else {\r\n      validTempZoneMax.setAttribute('height', 210);\r\n    }\r\n  }\r\n  setValidTempZone();\r\n};\r\n\r\n// takes user input to create a new sensor and add to sensorList\r\nconst addSensor = () => {\r\n  const setupName = document.getElementById('sensorName1').value;\r\n  const setupCurrentTemp = document.getElementById('initialTemp').value;\r\n  const setupHighAlarm = document.getElementById('highAlarm1').value;\r\n  const setupLowAlarm = document.getElementById('lowAlarm1').value;\r\n  const setupRangeMax = document.getElementById('rangeMax1').value;\r\n  const setupRangeMin = document.getElementById('rangeMin1').value;\r\n  const range = setupRangeMax - setupRangeMin;\r\n  if (\r\n    isNaN(setupCurrentTemp) ||\r\n    isNaN(setupHighAlarm) ||\r\n    isNaN(setupLowAlarm) ||\r\n    isNaN(setupRangeMax) ||\r\n    isNaN(setupRangeMin)\r\n  ) {\r\n    alert(\r\n      'Please enter valid inputs! (Alarms and Range inputs should be numbers)'\r\n    );\r\n    return;\r\n  } else if (\r\n    +setupHighAlarm < +setupLowAlarm ||\r\n    +setupRangeMax < +setupRangeMin\r\n  ) {\r\n    alert(\r\n      'High Alarm or Range Max cannot be smaller than Low Alarm or Range Min!'\r\n    );\r\n    return;\r\n  } else {\r\n    if (\r\n      setupName &&\r\n      setupCurrentTemp &&\r\n      setupHighAlarm &&\r\n      setupLowAlarm &&\r\n      setupRangeMax &&\r\n      setupRangeMin\r\n    ) {\r\n      const sensor = new Sensor(\r\n        setupName,\r\n        setupCurrentTemp,\r\n        setupHighAlarm,\r\n        setupLowAlarm,\r\n        setupRangeMax,\r\n        setupRangeMin,\r\n        range\r\n      );\r\n      sensorList.push(sensor);\r\n      // eslint-disable-next-line no-undef\r\n      $('#dashAddSensorModal').modal('toggle');\r\n      updateTempMarkings(\r\n        sensor.id,\r\n        setupHighAlarm,\r\n        setupLowAlarm,\r\n        setupRangeMax,\r\n        setupRangeMin,\r\n        range\r\n      );\r\n      updateDOM(sensorList.length);\r\n      toggleDisableAddSensorBtn(sensorList.length);\r\n      // toggleDisablesimulateTempsBtn(sensorList.length);\r\n    } else {\r\n      alert('Please fill all of the fields in order to update.');\r\n    }\r\n  }\r\n};\r\n\r\n// updates all sensors to next simulation temperature and updates text data\r\nfunction nextTemp() {\r\n  const thermometerPadding = 5;\r\n  for (let i = 0; i < sensorList.length; i++) {\r\n    sensorList[i].tempRecords.push({\r\n      date: new Date(),\r\n      temp: sensorList[i].currentTemp,\r\n    });\r\n    if (\r\n      sensorList[i].simTempDirection === UP &&\r\n      sensorList[i].currentTemp < +sensorList[i].highAlarm + thermometerPadding\r\n    ) {\r\n      ++sensorList[i].currentTemp;\r\n    } else if (\r\n      sensorList[i].simTempDirection === UP &&\r\n      sensorList[i].currentTemp >= +sensorList[i].highAlarm + thermometerPadding\r\n    ) {\r\n      sensorList[i].simTempDirection = DOWN;\r\n      --sensorList[i].currentTemp;\r\n    } else if (\r\n      sensorList[i].simTempDirection === DOWN &&\r\n      sensorList[i].currentTemp > +sensorList[i].lowAlarm - thermometerPadding\r\n    ) {\r\n      --sensorList[i].currentTemp;\r\n    } else {\r\n      sensorList[i].simTempDirection = UP;\r\n      ++sensorList[i].currentTemp;\r\n    }\r\n    updateTempBar(sensorList[i], i);\r\n    document.getElementById('sensor' + i + '-currentTemp').innerText =\r\n      sensorList[i].currentTemp;\r\n    document.getElementById(\r\n      'sensor' + i + '-alarmStatus'\r\n    ).innerText = updateAlarmStatus(sensorList[i], i);\r\n  }\r\n  tempSimulationStatus = 'ACTIVE';\r\n}\r\n\r\n// launches temperature simulation making the temperatures rise and fall\r\nfunction simulateTempsFeed() {\r\n  if (tempSimulationStatus === 'INACTIVE') {\r\n    // eslint-disable-next-line no-undef\r\n    tempUpdateActive = setInterval(nextTemp, tempUpdateFrequency);\r\n  }\r\n}\r\n\r\n// stops the temperature simulation\r\n// eslint-disable-next-line no-unused-vars\r\nfunction stopTempSimulation() {\r\n  if (simTempsBtn.classList.contains('disabled')) {\r\n    return;\r\n  } else {\r\n    try {\r\n      // eslint-disable-next-line no-undef\r\n      clearInterval(tempUpdateActive);\r\n      // eslint-disable-next-line no-undef\r\n      if ((tempUpdateActive = undefined))\r\n        throw 'Temp simulation not currently active';\r\n    } catch (err) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(err, 'Temp simulation is not currently active');\r\n    }\r\n  }\r\n  tempSimulationStatus = 'INACTIVE';\r\n}\r\n\r\n// runs temperature simulation if the process isnt not already running\r\n// eslint-disable-next-line no-unused-vars\r\nconst activateTempSimulation = () => {\r\n  // eslint-disable-next-line no-unused-vars\r\n  let status = 'inactive';\r\n  if (simTempsBtn.classList.contains('disabled')) {\r\n    return;\r\n  } else {\r\n    status = 'active';\r\n    simulateTempsFeed();\r\n  }\r\n};\r\n\r\n// updates modal after opening\r\nfunction updateEditSensorForm() {\r\n  // eslint-disable-next-line no-undef\r\n  $('#dashEditSensorModal').on('show.bs.modal', function () {\r\n    updateEditSensorFormHelper(event);\r\n  });\r\n}\r\n\r\n// helps update modal input fields with existing data when editing sensors\r\nfunction updateEditSensorFormHelper(event) {\r\n  const id = event.target.offsetParent.getAttribute('id').slice(1, 2);\r\n  const sensor = sensorList[id];\r\n  const NameInput = document.getElementById('editSensorName1');\r\n  const HighAlarmInput = document.getElementById('editHighAlarm1');\r\n  const LowAlarmInput = document.getElementById('editLowAlarm1');\r\n  const rangeMaxInput = document.getElementById('editRangeMax1');\r\n  const rangeMinInput = document.getElementById('editRangeMin1');\r\n  const calibrateTemp = document.getElementById('editTemp');\r\n  const modalID = document.getElementById('modalID');\r\n  NameInput.setAttribute('value', sensor.name);\r\n  HighAlarmInput.setAttribute('value', sensor.highAlarm);\r\n  LowAlarmInput.setAttribute('value', sensor.lowAlarm);\r\n  rangeMaxInput.setAttribute('value', sensor.rangeMax);\r\n  rangeMinInput.setAttribute('value', sensor.rangeMin);\r\n  calibrateTemp.setAttribute('value', sensor.currentTemp);\r\n  if (modalID !== null) {\r\n    modalID.setAttribute('id', `modalID-${id}`);\r\n  }\r\n}\r\n\r\n// updates sensorList array and DOM after submitting edit updates\r\nconst EditSensorModalUpdateBtn = () => {\r\n  const modalBody =\r\n    event.srcElement.parentNode.previousElementSibling.firstElementChild\r\n      .firstElementChild;\r\n  const modalID = modalBody.getAttribute('id').slice(-1);\r\n  const editName = document.getElementById('editSensorName1');\r\n  const editHighAlarm = document.getElementById('editHighAlarm1');\r\n  const editLowAlarm = document.getElementById('editLowAlarm1');\r\n  const editRangeMax = document.getElementById('editRangeMax1');\r\n  const editRangeMin = document.getElementById('editRangeMin1');\r\n  const editCurrentTemp = document.getElementById('editTemp');\r\n  const editRange = editRangeMax.value - editRangeMin.value;\r\n  if (\r\n    editName.value &&\r\n    editHighAlarm.value &&\r\n    editLowAlarm.value &&\r\n    editRangeMax.value &&\r\n    editRangeMin.value &&\r\n    editCurrentTemp.value\r\n  ) {\r\n    if (+editHighAlarm.value < +editLowAlarm.value) {\r\n      alert('High Alarm cannot be less than Low Alarm!');\r\n      return;\r\n    } else if (+editRangeMax.value < +editRangeMin.value) {\r\n      alert('Range Max cannot be less than Range Min!');\r\n      return;\r\n    } else sensorList[modalID].name = editName.value;\r\n    sensorList[modalID].currentTemp = editCurrentTemp.value;\r\n    sensorList[modalID].highAlarm = editHighAlarm.value;\r\n    sensorList[modalID].lowAlarm = editLowAlarm.value;\r\n    sensorList[modalID].rangeMax = editRangeMax.value;\r\n    sensorList[modalID].rangeMin = editRangeMin.value;\r\n    sensorList[modalID].range = editRangeMax.value - editRangeMin.value;\r\n    modalBody.setAttribute('id', 'modalID');\r\n    updateTempMarkings(\r\n      +sensorList[modalID].id,\r\n      +editHighAlarm.value,\r\n      +editLowAlarm.value,\r\n      +editRangeMax.value,\r\n      +editRangeMin.value,\r\n      +editRange\r\n    );\r\n    updateDOM(modalID);\r\n    // eslint-disable-next-line no-undef\r\n    $('#dashEditSensorModal').modal('toggle');\r\n  }\r\n};\r\n\r\n// Function to clear form fields for the add sensor modal after closing\r\n// eslint-disable-next-line no-undef\r\n$.clearFormFields = function (area) {\r\n  // eslint-disable-next-line no-undef\r\n  $(area).find('input[type=text').val('');\r\n};\r\n\r\n// Function to rename the editSensorModal divID back to original state\r\n// eslint-disable-next-line no-undef\r\n$('#dashEditSensorModal').on('hidden.bs.modal', function () {\r\n  document\r\n    .getElementById('editSensorName1')\r\n    .parentElement.parentElement.firstElementChild.setAttribute(\r\n      'id',\r\n      'modalID'\r\n    );\r\n});\r\n\r\n// updates sensorList array and DOM after deleting a sensor\r\nconst rebuildSensorList = (id) => {\r\n  if (sensorList[id]) {\r\n    const sensorNumber = id;\r\n    const sensorNumberAddOne = +id + 1;\r\n    const sensorName = document.getElementById(`sensor${sensorNumber}-name`);\r\n    const sensorTemp = document.getElementById(\r\n      `sensor${sensorNumber}-currentTemp`\r\n    );\r\n    const sensorStatus = document.getElementById(\r\n      `sensor${sensorNumber}-alarmStatus`\r\n    );\r\n    const sensorHighAlarm = document.getElementById(\r\n      `sensor${sensorNumber}-highAlarm`\r\n    );\r\n    const sensorLowAlarm = document.getElementById(\r\n      `sensor${sensorNumber}-lowAlarm`\r\n    );\r\n    sensorName.innerText = sensorList[id].name;\r\n    sensorTemp.innerText = sensorList[id].currentTemp;\r\n    sensorStatus.innerText = sensorList[id].alarmStatus;\r\n    sensorHighAlarm.innerText = sensorList[id].highAlarm;\r\n    sensorLowAlarm.innerText = sensorList[id].lowAlarm;\r\n    updateTempMarkings(\r\n      sensorNumberAddOne,\r\n      sensorList[id].highAlarm,\r\n      sensorList[id].lowAlarm,\r\n      sensorList[id].rangeMax,\r\n      sensorList[id].rangeMin,\r\n      sensorList[id].range\r\n    );\r\n    updateTempBar(sensorList[id], id);\r\n    document.getElementById(\r\n      'sensor' + id + '-alarmStatus'\r\n    ).innerText = updateAlarmStatus(sensorList[id], id);\r\n  }\r\n};\r\n\r\n// removes old DOM elements after deleting sensor\r\nconst removeOldSensors = (id) => {\r\n  if (!sensorList[id]) {\r\n    document.getElementById('s' + id).classList.add('inactive-box');\r\n  }\r\n};\r\n\r\n// deletes sensor from dashboard\r\nconst deleteSensor = () => {\r\n  const id = event.target.offsetParent.offsetParent.offsetParent.previousElementSibling.previousElementSibling.childNodes[1].firstElementChild.firstElementChild.nextElementSibling.firstElementChild.firstElementChild\r\n    .getAttribute('id')\r\n    .slice(-1);\r\n  sensorList.splice(id, 1);\r\n  for (let i = id; i < sensorList.length + 1; i++) {\r\n    rebuildSensorList(i);\r\n    removeOldSensors(i);\r\n  }\r\n  $('#confirmationModal').modal('toggle');\r\n  $('#dashEditSensorModal').modal('toggle');\r\n  // toggleDisablesimulateTempsBtn(sensorList.length);\r\n  toggleDisableAddSensorBtn(sensorList.length);\r\n};\r\n\r\n// saves sensorList to sessionStorage when navigating away from dashboard page\r\nwindow.onbeforeunload = function () {\r\n  this.sessionStorage.setItem('sensorList', JSON.stringify(sensorList));\r\n};\r\n\r\n// initializes dashboard page\r\nfunction init() {\r\n  if (sessionStorage.getItem('sensorList')) {\r\n    sensorList = JSON.parse(sessionStorage.getItem('sensorList'));\r\n    updateDOM();\r\n    for (let i = 0; i < sensorList.length + 1; i++) {\r\n      rebuildSensorList(i);\r\n    }\r\n    // toggleDisablesimulateTempsBtn(sensorList.length);\r\n  }\r\n  // eslint-disable-next-line no-empty\r\n  if (sensorList === []) {\r\n  } else {\r\n    simulateTempsFeed();\r\n  }\r\n  if (!sessionStorage.getItem('tutorialRead')) {\r\n    $('#tutorialModal').modal('toggle');\r\n    sessionStorage.setItem('tutorialRead', 'TRUE');\r\n  }\r\n}\r\n\r\n// Event Listeners\r\ndashAddSensorBtn.addEventListener('click', addSensor);\r\n// simTempsBtn.addEventListener('click', activateTempSimulation); // working feature, currently removed for ease of use\r\n// stopTempFeedBtn.addEventListener('click', stopTempSimulation); // working feature, currently removed for ease of use\r\ndashEditSensorModalUpdate.addEventListener('click', EditSensorModalUpdateBtn);\r\neditSensorBtn.addEventListener('click', updateEditSensorForm);\r\neditSensorBtn2.addEventListener('click', updateEditSensorForm);\r\neditSensorBtn3.addEventListener('click', updateEditSensorForm);\r\neditSensorBtn4.addEventListener('click', updateEditSensorForm);\r\neditSensorBtn5.addEventListener('click', updateEditSensorForm);\r\neditSensorBtn6.addEventListener('click', updateEditSensorForm);\r\ndeleteSensorBtn.addEventListener('click', deleteSensor);\r\n\r\n// creates initial sensors\r\nif (sessionStorage.getItem('sensorList')) {\r\n  sensorList = JSON.parse(sessionStorage.getItem('sensorList'));\r\n} else {\r\n  sensorList[0] = new Sensor('Cooler 1', 45, 55, 35, 65, 25);\r\n  sensorList[1] = new Sensor('Freezer 1', -5, 32, -30, 40, -40);\r\n  sensorList[2] = new Sensor('Dry Storage', 75, 90, 32, 100, 0);\r\n  sessionStorage.setItem('sensorList', JSON.stringify(sensorList));\r\n}\r\n\r\ninit();\r\n\r\n// eslint-disable-next-line no-console\r\nconsole.log('Thank you for taking the time to look at my project!');\r\n\n\n//# sourceURL=webpack:///./src/dashboard.js?");

/***/ })

/******/ });